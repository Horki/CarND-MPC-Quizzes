#include <gtest/gtest.h>
#include <polynomial.hpp>

TEST(PolyfitTest, test_polyfit) {
  VectorXd xvals(6);
  VectorXd yvals(6);
  VectorXd res(4);
  res <<
    -0.9055623708245128522520417391206137835979461669921875,
    0.68134120944771059402711443908629007637500762939453125,
    -0.002388178248299893148554051691689892322756350040435791015625,
    3.31428661034954222608188943721696517741293064318597316741943359375e-06;
  xvals << 9.261977, -2.06803, -19.6663, -36.868, -51.6263, -66.3482;
  yvals << 5.17, -2.25, -15.306, -29.46, -42.85, -57.6116;
  VectorXd coeffs = polyfit(xvals, yvals, 3);

  ASSERT_EQ(xvals.size(), yvals.size()) << "xvals and yvals are not same size";
  ASSERT_EQ(coeffs.size(), res.size()) << "coeffs and res_1 are not same size";

  for (auto i = 0; i < coeffs.size(); ++i) {
    ASSERT_EQ(coeffs(i), res(i)) << "coeffs(" << i << ") error";
  }
}

TEST(PolyfitTest, test_polyeval) {
  VectorXd test(3);
  double should_be = 34.0;
  test << 1.0, 2.0, 3.0;
  double result = polyeval(test, 3.0);
  ASSERT_EQ(result, should_be);
}

TEST(PolyfitTest, test_polyfit_and_polyeval) {
  VectorXd xvals(6);
  VectorXd yvals(6);
  VectorXd res(21);
  res <<
    -0.9055623708245128522520417391206137835979461669921875,
    -0.2266060253384918066199560371387633495032787322998046875,
    0.447593849370591545522302112658508121967315673828125,
    1.1170571390223995589252581339678727090358734130859375,
    1.7818037293365935891387152878451161086559295654296875,
    2.441853506032836573780286926194094121456146240234375,
    3.097226354830790118199956850730814039707183837890625,
    3.74794216145011649388152363826520740985870361328125,
    4.39402081161047686208576124045066535472869873046875,
    5.0354821910315354926979125593788921833038330078125,
    5.67234618543295265880033184657804667949676513671875,
    6.3046326805343912980106324539519846439361572265625,
    6.93236156205551434794642773340456187725067138671875,
    7.5555527157159811935116522363387048244476318359375,
    8.1742260272354574368591784150339663028717041015625,
    8.7884013823336015747145211207680404186248779296875,
    9.3980986667300765446952937054447829723358154296875,
    10.00333776614454706077594892121851444244384765625,
    10.6041385662966707315035819192416965961456298828125,
    11.200520952906114047209484851919114589691162109375,
    11.7925048116925381691544316709041595458984375;

  xvals << 9.261977, -2.06803, -19.6663, -36.868, -51.6263, -66.3482;
  yvals << 5.17, -2.25, -15.306, -29.46, -42.85, -57.6116;
  VectorXd coeffs = polyfit(xvals, yvals, 3);

  ASSERT_EQ(xvals.size(), yvals.size()) << "xvals and yvals are not same size";

  for (auto i = 0; i < double(res.size()); ++i) {
    double r = polyeval(coeffs, i);
    ASSERT_EQ(r, res(i)) << "polyeval(" << i << ") error";
  }
}
